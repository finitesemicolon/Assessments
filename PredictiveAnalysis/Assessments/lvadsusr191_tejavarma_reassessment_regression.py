# -*- coding: utf-8 -*-
"""LVADSUSR191_TejaVarma_Reassessment_Regression

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1z6J2UEuXbip4dbuxvxjX_AH4WLLme8id
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import MinMaxScaler,LabelEncoder,StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error,mean_absolute_error,r2_score

df = pd.read_csv('https://raw.githubusercontent.com/Deepsphere-AI/LVA-Batch5-Assessment/main/bengaluru_house_prices.csv')

df

df.info()

df.describe()

df.shape
# checking the shape of the dataset

# checking for duplicate values in the data
df.duplicated().sum()
# 529 duplicates found

df.drop_duplicates(inplace =True)
# droping duplicates

df.shape

# checking for any null values
df.isna().sum()
# there are null values in the dataset

#univariate analysis
for column in df.select_dtypes(include=['int64','float64']).columns:
  plt.figure(figsize=(10,5))
  sns.histplot(df[column])

# filling the null values in bath and balcony with the mean of them
df['bath'] = df['bath'].fillna(df['bath'].median()) # since it is left skewed
df['balcony'] = df['balcony'].fillna(df['balcony'].mean()) # since it is center skewed

df.isna().sum()

# distribution of object datatype in data
for column in df.select_dtypes(include=['object']).columns:
  plt.figure(figsize=(10,5))
  sns.histplot(df[column])

# filling the categorical data with the mode of those values
df['location'] = df['location'].fillna(df['location'].mode()[0])
df['size'] = df['size'].fillna(df['size'].mode()[0])
df['society'] = df['society'].fillna(df['society'].mode()[0])

df.isna().sum()
# no null values found, all of them are imputed

# converting some columns to numeric
df['total_sqft']=pd.to_numeric(df['total_sqft'],errors='coerce')

#check for outliers in the data
for c in df.select_dtypes(include=['int64','float64']).columns:
  plt.figure(figsize=(10,5))
  sns.boxplot(df[c])

# outlier treatment (clipping and capping the outliers to upper and lower bounds)
for c in df.select_dtypes(include=['int64','float64']).columns:
  q1 = df[c].quantile(0.25)
  q3 = df[c].quantile(0.75)
  iqr = q3-q1
  lwr = q1-1.5*iqr
  upr = q3+1.5*iqr
  df.loc[df[c]>upr,c]=upr
  df.loc[df[c]<lwr,c]=lwr

# checking for outliers again
for c in df.select_dtypes(include=['int64','float64']).columns:
  plt.figure(figsize=(10,5))
  sns.boxplot(df[c])
  # outliers handled

# assigning correlation matrix and heat map
numeric = df.select_dtypes(include = ['int64','float64']).columns
heat = df[numeric].corr()
sns.heatmap(heat,annot = True)

# Encoding the categorical data (label encoding)

label_encoder = LabelEncoder()

for col in df.columns:
    if df[col].dtype == 'object':  # Check if the column contains categorical data
        df[col] = label_encoder.fit_transform(df[col])

df.head()

#data splitting and  feature selection

x = df.drop(columns=['price','area_type','availability','balcony','total_sqft'])
y = df['price']
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3)

#scaling
scaler=StandardScaler()
x_train=scaler.fit_transform(x_train)
x_test=scaler.transform(x_test)

df.isna().sum()

df.info()

#model fit
model = LinearRegression()
model.fit(x_train,y_train)
y_pred = model.predict(x_test)

#evaluation
print("mean squared error:",mean_squared_error(y_test,y_pred))
print("root mean squared error:",mean_squared_error(y_test,y_pred,squared=False))
print("mean absolute error:",mean_absolute_error(y_test,y_pred))
print("r2 score:",r2_score(y_test,y_pred))

# model 2
model = RandomForestRegressor()
model.fit(x_train,y_train)
y_pred = model.predict(x_test)

# model 2 metrics
r2 = r2_score(y_test,y_pred)
MSE = mean_squared_error(y_test,y_pred)
RMSE = mean_squared_error(y_test,y_pred,squared=False)
MAE = mean_absolute_error(y_test,y_pred)
print("MSE: ",MSE)
print("RMSE: ",RMSE)
print("MAE:",MAE)
print("R2 Score: ", r2)