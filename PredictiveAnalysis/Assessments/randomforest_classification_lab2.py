# -*- coding: utf-8 -*-
"""RandomForest Classification lab2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LU_gaEWiPHb3O4aPP2XgsZZwgP-jKPbi
"""

import numpy as np
import pandas as pd
from sklearn import metrics
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import cross_val_score
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, roc_curve, auc
from sklearn.model_selection import train_test_split
import seaborn as sns
from sklearn.preprocessing import OneHotEncoder, LabelEncoder
import matplotlib.pyplot as plt
from sklearn.tree import plot_tree

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, precision_score, recall_score, ConfusionMatrixDisplay
from sklearn.model_selection import RandomizedSearchCV, train_test_split
from scipy.stats import randint

df = pd.read_csv('https://raw.githubusercontent.com/Deepsphere-AI/LVA-Batch5-Assessment/main/winequality-red.csv')
df

#duplicates
df.duplicated().sum() # there are too many duplicate values in the data so removing them

df.drop_duplicates()

df.shape

df.info()

# data cleaning
df.isnull().sum() # it also has null values

#filling up mean values in the data
df['fixed acidity']= df['fixed acidity'].fillna(df['fixed acidity'].mean())

df['volatile acidity']= df['volatile acidity'].fillna(df['volatile acidity'].mean())
df['citric acid']= df['citric acid'].fillna(df['citric acid'].mean())
df['residual sugar']= df['residual sugar'].fillna(df['residual sugar'].mean())
df['chlorides']= df['chlorides'].fillna(df['chlorides'].mean())
df['free sulfur dioxide']= df['free sulfur dioxide'].fillna(df['free sulfur dioxide'].mean())
df['sulphates']= df['sulphates'].fillna(df['sulphates'].mean())

df.isnull().sum()

sns.pairplot(df)

y = df['quality']
x = df.drop('quality',axis = 1)

scaler = MinMaxScaler
scaled_df = scaler.fit_transform(df)

x_train,x_test,y_train,y_test = train_test_split(x,y, test_size = 0.2)

model = RandomForestClassifier()
y_pred = model.fit_predict(y_test)

# accuracy metrics

print("Accuracy : ",accuracy_score)
print("Precision : ",precision_score)
print("Recall: ",recall_score)
print("F1 score : ",f1_score)