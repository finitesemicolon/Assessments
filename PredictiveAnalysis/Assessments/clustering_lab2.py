# -*- coding: utf-8 -*-
"""Clustering lab2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f6PO3WtobwdaPnpfLpH-eEVVvO9rN7jl
"""

import numpy as np
import pandas as pd
from sklearn import metrics
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import cross_val_score
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, roc_curve, auc
from sklearn.model_selection import train_test_split
import seaborn as sns
from sklearn.preprocessing import OneHotEncoder, LabelEncoder
import matplotlib.pyplot as plt
from sklearn.tree import plot_tree

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, precision_score, recall_score, ConfusionMatrixDisplay
from sklearn.model_selection import RandomizedSearchCV, train_test_split
from scipy.stats import randint

df = pd.read_csv('https://raw.githubusercontent.com/Deepsphere-AI/LVA-Batch5-Assessment/main/Mall_Customers.csv')
df

df.info()

df.isna().sum() # there are null values in the given data

# replacing the null values with the median
df['Annual Income (k$)']= df['Annual Income (k$)'].fillna(df['Annual Income (k$)'].median())

df

df.duplicated().sum()

# checking for any null values ---- no null values
df.dropna() # the null values are dropped

df.shape

sns.pairplot(df) # feature engineering to derive any insights from the data

# ratio of spending to income - todo  ---- compare the (spending vs income)
sns.pairplot(df['Annual Income (k$)'])

#elbow method to find the no of clusters
from sklearn.model_selection import KFold

wcss = [] #Within Cluster Sum of Squares
k_values = range(1, 10)

for k in k_values:
    kmeans = KMeans(n_clusters=k, init='k-means++', max_iter=300, n_init=10, random_state=42)
    kmeans.fit(df)
    wcss.append(kmeans.inertia_)

plt.figure(figsize=(10, 5))
plt.plot(k_values, wcss, marker='o',color='#8B4513')
plt.title('Elbow Method')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Within Cluster Sum of Squares')
plt.show() # k = 3

# KMEANS model metrics , silhoutte score is a metric used to determine the accuracy of the model in Classification

silhouette_score